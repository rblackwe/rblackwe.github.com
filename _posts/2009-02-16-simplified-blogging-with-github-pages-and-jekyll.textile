---
layout: post
title: Simplified blogging with GitHub Pages and Jekyll
---

h1. {{ page.title }}

p(meta). Feb 16, 2009 - San Diego

One of my biggest problems with blogging has always been that I spend way too much time tweaking plugins and widgets and not enough time actually writing posts. Wouldn't it be cool if I could just type directly into a text file and forget the distractions of WSYWIG editors? What if I could actually version control my posts (preferably with "Git":http://git-scm.com/)?

*Enter Jekyll.*

"Jekyll":http://github.com/mojombo/jekyll/tree/master is a simple blog-oriented "Rubygem":http://www.rubygems.org/ that generates static html sites from a source of "Textile-":http://www.textism.com/tools/textile/ or "Markdown-formatted":http://daringfireball.net/projects/markdown/ text files and HTML templates with "Liquid":http://www.liquidmarkup.org/ markup for layout logic. You can configure page variables (such as title or layout) by inserting a bit of YAML at the top of the file.

The workflow looks a little something like this:
* Put your layout(s), formatted with Liquid tags, in the <code>_layouts</code> folder
* Put your main page at <code>index.html</code>
* Create a file for each post (with the filename <code>YYYY-MM-DD-my-post-slug.textile</code>) in the _posts folder
* Run the following command to generate the static site: <pre class="terminal"><code>$ jekyll <output_folder></code></pre>

Of course, this approach has one huge problem (in my eyes). Once I've generated this mess of static HTML files, how do I put them up somewhere without having to FTP them every time?

*GitHub Pages*

"GitHub Pages":http://pages.github.com/ is GitHub's new feature that allows you to publish content to the web via your "GitHub":http://github.com/ hosted repositories. You can create project pages (by creating a branch in your project called <code>gh-pages</code>) or user pages (by creating a repository called <code><username>.github.com</code>). If your branch or repository is in Jekyll format, it will be parsed by Jekyll every time you push changes to the repository. Anything in <code><code></code> tags will be parsed by the "Pygments":http://pygments.org/ syntax highlighter.

With a paid GitHub account, you can point your own domain name at your GitHub Page by putting a simple text file called <code>CNAME</code> at the root level of your Jekyll project with the domain name in it (e.g. <code>jarinheit.com</code>). You can then create a CNAME record in your DNS manager (e.g. <code>jarinheit.com. IN CNAME jarinudom.github.com.</code>). Don't forget the trailing periods, ok!

With GitHub pages, my workflow now looks like this:
* Create posts in the <code>_posts</code> folder
* Commit and <code>git push</code> to the GitHub repository

That's it!

*Helpful Tips*

You'll often want to test your posts locally, and you can do this easily with the following steps:
* Create a folder called <code>_site</code> in your Jekyll project folder
* Add <code>_site</code> to your <code>.gitignore</code> file to prevent it from being checked in to the repository
* Run the following command from within the project folder: <pre class="terminal"><code>$ jekyll _site --auto --server</code></pre>
* Point your browser at <code>http://localhost:4000</code> to test

You can also add a <code>_drafts</code> folder to your <code>.gitignore</code> to store drafts (everything in the <code>_posts</code> folder gets parsed).

*Need a starting point?*

You can see a working example of a Jekyll project (this blog) "here":http://github.com/jarinudom/jarinudom.github.com/tree/master.