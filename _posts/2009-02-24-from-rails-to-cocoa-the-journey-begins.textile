---
layout: post
title: From Rails to Cocoa - The Journey Begins
---

h1. {{ page.title }}

p(meta). Feb 24, 2009 - San Diego

Well, I've decided to bite the bullet and learn a "real" programming language (or so my game developer friend says). And by that, I'm talking about Objective-C. Aside from the "obvious reasons":http://www.crunchgear.com/2009/02/13/another-iphone-app-developer-making-some-serious-cash/, I've gotten so many requests from various friends for various iPhone apps that I realized there are a ton of niche applications that are easy to code and that people would pay money for.

I've "downloaded the SDK":http://developer.apple.com/iPhone/program/download.html, my business documents are faxed in to Apple, and my iPhone developer license is pending. The following is my current limited understanding of Cocoa, and I'll be posting updates as I learn.

h2. Memory Management

Aside from memory management, Objective-C is a lot like Ruby. Cocoa does support "garbage collection":http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29 on OS X, but on the iPhone you have to allocate and release your memory manually. This is for a few reasons: First, garbage collection is too expensive on the iPhone's single-threaded processor. Second, the iPhone has a very limited amount of memory and simple "memory leaks":http://en.wikipedia.org/wiki/Memory_leak can easily cause your application to crash. In fact, Apple is concerned enough about the user frustration that comes with unstable apps that they will "profile":http://en.wikipedia.org/wiki/Software_profiling your app and check it for memory leaks before they will allow it on the App Store.

Luckily for me, the two apps I have planned right now are simple enough that I will mostly be releasing objects in the same method they were instantiated in. iPhone memory management has its quirks though, as every view needs to be able to respond to the <code>didRecieveMemoryWarning</code> message and release its children if it is not currently being displayed.

h2. Model-View-Controller

I was very excited to learn that working with Cocoa's MVC architecture is sort of a hybrid of Rails and Adobe Flex, both of which I have worked with extensively. It's actually closer to Flex if you're using the "Mate framework":http://mate.asfusion.com/, since it relies on similar design patterns.

In Mate, your views blindly dispatch events, which are intercepted and processed by <code>EventMaps</code> (which act in a similar fashion to controllers in Rails). The <code>EventMaps</code> call remote services (if necessary) and pass data to or call methods on your manager classes (equivalent to models in Rails). The views are in turn bound to the data in the managers (possibly massaged by a view adapter on the way) and update whenever that data changes.

(note: I am not 100% on the following)

Cocoa operates in a similar fashion. Instead of messing with <code>EventMaps</code>, you use Interface Builder to assign view actions (such as button clicks) to delegates and bind models to view objects via outlets. Since Objective-C uses "message passing":http://en.wikipedia.org/wiki/Message_passing, any methods called on your delegates are silently dropped if they are not implemented. If you want to handle a certain event, such as a button click, you simply implement the <code>buttonPressed:</code> method in your delegate and tell it what to do.

Edit: Ok it is more like you create an action in your view controller and use Interface Builder to bind the button click event to the action.

h2. Resources

Here are the resources I'm using to learn Cocoa:

* "Cocoa Programming for Mac OS X - 3rd Edition":http://www.amazon.com/gp/product/0321503619?ie=UTF8&tag=jarinudomsblo-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321503619
* "Peepcode Screencast: Objective-C for Rubyists":http://peepcode.com/products/objective-c-for-rubyists
* "Pragmatic Programmers Screencasts: Writing Your First iPhone Application":http://www.pragprog.com/screencasts/v-bdiphone/writing-your-first-iphone-application
* "iPhone SDK Development - Beta PDF":http://pragprog.com/titles/amiphd/iphone-sdk-development
